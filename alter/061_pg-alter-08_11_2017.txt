﻿/*
Replace all REPLACE_ME by ((LAST_ROW_ID % MAX_COUNT_IN_PARTITION + 1) * MAX_COUNT_IN_PARTITION + 1)
*/

set schema 'zafira';

CREATE OR REPLACE FUNCTION CREATE_PARTITION(TABLE_NAME TEXT, MAX_COUNT_IN_PARTITION INTEGER, ITEM_ID INTEGER)
RETURNS TEXT AS
$$
DECLARE PARTITION_TABLE_NAME TEXT;
DECLARE PERIOD TEXT;
DECLARE TABLE_TIMESTAMP BIGINT;
DECLARE RANDOM_VALUE INTEGER;
DECLARE LAST_ITEM_ID INTEGER;
BEGIN
    TABLE_TIMESTAMP := (SELECT CAST(EXTRACT(epoch FROM CURRENT_TIMESTAMP)*1000 AS BIGINT));
    RANDOM_VALUE := (SELECT CAST(RANDOM()*1000 AS INTEGER));
    PERIOD := (TABLE_TIMESTAMP + RANDOM_VALUE);
    PARTITION_TABLE_NAME := (TABLE_NAME || '_' || PERIOD);
    LAST_ITEM_ID :=(ITEM_ID + MAX_COUNT_IN_PARTITION);
    EXECUTE
        'CREATE TABLE ZAFIRA.'|| PARTITION_TABLE_NAME ||' (LIKE ZAFIRA.'||TABLE_NAME||' INCLUDING ALL);
         ALTER TABLE ZAFIRA.'|| PARTITION_TABLE_NAME ||' ADD CONSTRAINT '|| PARTITION_TABLE_NAME ||'_CREATED_AT_CHECK
             CHECK (ID >= '||ITEM_ID||' AND ID < '||LAST_ITEM_ID||');
         ALTER TABLE ZAFIRA.'|| PARTITION_TABLE_NAME ||' INHERIT ZAFIRA.'||TABLE_NAME||';';
 RETURN PARTITION_TABLE_NAME;
END
$$
LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION CREATE_INSERT_FUNCTION(INSERT_FUNCTION_NAME TEXT, TABLE_NAME TEXT, PARTITION_TABLE_NAME TEXT)
RETURNS VOID AS
$$
BEGIN
    EXECUTE
    'CREATE OR REPLACE FUNCTION ' || INSERT_FUNCTION_NAME ||'
    RETURNS TRIGGER AS
    $BODY$
    DECLARE r ZAFIRA.' || TABLE_NAME || '%rowtype;
    BEGIN
    INSERT INTO ZAFIRA.'|| PARTITION_TABLE_NAME ||' VALUES (NEW.*) RETURNING * INTO r;
    RETURN r;
    END
    $BODY$
    LANGUAGE plpgsql;';
END
$$
LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION CREATE_INSERT_TRIGGER(INSERT_FUNCTION_NAME TEXT, TABLE_NAME TEXT, INSERT_TRIGGER_NAME TEXT, MAX_COUNT_IN_PARTITION INTEGER)
RETURNS VOID AS
$$
BEGIN
EXECUTE
'DROP TRIGGER IF EXISTS '||INSERT_TRIGGER_NAME||' ON zafira.'||TABLE_NAME||';
 CREATE TRIGGER '|| INSERT_TRIGGER_NAME ||'
	BEFORE INSERT ON ZAFIRA.'|| TABLE_NAME ||'
    FOR EACH ROW
    WHEN (NEW.id = REPLACE_ME OR (NEW.id - 1) % '||MAX_COUNT_IN_PARTITION||' <> 0)
    EXECUTE PROCEDURE '|| INSERT_FUNCTION_NAME ||'';
END
$$
LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION CREATE_INSERT_FUNCTION_AND_TRIGGER
(TABLE_NAME TEXT, INSERT_FUNCTION_NAME TEXT, INSERT_TRIGGER_NAME TEXT, MAX_COUNT_IN_PARTITION INTEGER, ITEM_ID INTEGER)
RETURNS TEXT AS
$$
DECLARE NEW_PARTITION_TABLE_NAME TEXT;
BEGIN
    SELECT ZAFIRA.CREATE_PARTITION(TABLE_NAME, MAX_COUNT_IN_PARTITION, ITEM_ID) INTO NEW_PARTITION_TABLE_NAME;
    PERFORM ZAFIRA.CREATE_INSERT_FUNCTION(INSERT_FUNCTION_NAME, TABLE_NAME, NEW_PARTITION_TABLE_NAME);
    PERFORM ZAFIRA.CREATE_INSERT_TRIGGER(INSERT_FUNCTION_NAME, TABLE_NAME, INSERT_TRIGGER_NAME, MAX_COUNT_IN_PARTITION);
    RETURN NEW_PARTITION_TABLE_NAME;
END
$$
LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION CREATE_UPDATE_FUNCTION
(UPDATE_FUNCTION_NAME TEXT, INSERT_FUNCTION_NAME TEXT, TABLE_NAME TEXT,
 INSERT_TRIGGER_NAME TEXT, MAX_COUNT_IN_PARTITION INTEGER, ITEM_ID INTEGER)
RETURNS VOID AS
$$
BEGIN
EXECUTE
    'CREATE OR REPLACE FUNCTION '||UPDATE_FUNCTION_NAME||'
    RETURNS TRIGGER AS
    $BODY$
    DECLARE r ZAFIRA.'||TABLE_NAME||'%rowtype;
    DECLARE PARTITION_TABLE_NAME TEXT;
    BEGIN
    DROP FUNCTION IF EXISTS ZAFIRA.'||INSERT_FUNCTION_NAME||' CASCADE;
    SELECT ZAFIRA.CREATE_INSERT_FUNCTION_AND_TRIGGER('''||TABLE_NAME||''','''||INSERT_FUNCTION_NAME||''','''||INSERT_TRIGGER_NAME||''','||MAX_COUNT_IN_PARTITION||', NEW.id)
    INTO PARTITION_TABLE_NAME;
    EXECUTE ''INSERT INTO ZAFIRA.''|| PARTITION_TABLE_NAME ||'' VALUES ($1.*) RETURNING * '' INTO r USING NEW;
    RETURN r;
    END;
    $BODY$
    LANGUAGE plpgsql;';
END
$$
LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION CREATE_UPDATE_TRIGGER(UPDATE_FUNCTION_NAME TEXT, TABLE_NAME TEXT, UPDATE_TRIGGER_NAME TEXT, MAX_COUNT_IN_PARTITION INTEGER)
RETURNS VOID AS
$$
BEGIN
EXECUTE
'CREATE TRIGGER '|| UPDATE_TRIGGER_NAME ||'
	BEFORE INSERT ON ZAFIRA.'|| TABLE_NAME ||'
    FOR EACH ROW
    WHEN (NEW.id <> REPLACE_ME AND (NEW.id - 1) % '||MAX_COUNT_IN_PARTITION||' = 0)
    EXECUTE PROCEDURE '|| UPDATE_FUNCTION_NAME ||'';
END
$$
LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION CREATE_UPDATE_FUNCTION_AND_TRIGGER
(TABLE_NAME TEXT, INSERT_FUNCTION_NAME TEXT, INSERT_TRIGGER_NAME TEXT,
 UPDATE_FUNCTION_NAME TEXT, UPDATE_TRIGGER_NAME TEXT, MAX_COUNT_IN_PARTITION INTEGER, ITEM_ID INTEGER)
RETURNS VOID AS
$$
BEGIN
PERFORM ZAFIRA.CREATE_UPDATE_FUNCTION
(UPDATE_FUNCTION_NAME, INSERT_FUNCTION_NAME, TABLE_NAME, INSERT_TRIGGER_NAME, MAX_COUNT_IN_PARTITION, ITEM_ID);
PERFORM ZAFIRA.CREATE_UPDATE_TRIGGER(UPDATE_FUNCTION_NAME, TABLE_NAME, UPDATE_TRIGGER_NAME, MAX_COUNT_IN_PARTITION);
END
$$
LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION CREATE_DELETE_FUNCTION(DELETE_FUNCTION_NAME TEXT, TABLE_NAME TEXT)
RETURNS VOID AS
$$
BEGIN
EXECUTE
'CREATE OR REPLACE FUNCTION ' || DELETE_FUNCTION_NAME || '
     RETURNS TRIGGER AS
     $BODY$
     DECLARE r ZAFIRA.' || TABLE_NAME || '%rowtype;
     BEGIN
     DELETE FROM ONLY  ZAFIRA.'|| TABLE_NAME ||' where id = NEW.id returning * into r;
     RETURN r;
     END;
     $BODY$
     LANGUAGE plpgsql;';
END
$$
LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION CREATE_DELETE_TRIGGER(DELETE_FUNCTION_NAME TEXT, TABLE_NAME TEXT, DELETE_TRIGGER_NAME TEXT)
RETURNS VOID AS
$$
BEGIN
EXECUTE
'CREATE TRIGGER ' || DELETE_TRIGGER_NAME ||'
     AFTER INSERT ON ' || TABLE_NAME ||'
     FOR EACH ROW
     EXECUTE PROCEDURE ' || DELETE_FUNCTION_NAME ||'';
END
$$
LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION CREATE_DELETE_FUNCTION_AND_TRIGGER
(TABLE_NAME TEXT, DELETE_FUNCTION_NAME TEXT, DELETE_TRIGGER_NAME TEXT)
RETURNS VOID AS
$$
BEGIN
PERFORM ZAFIRA.CREATE_DELETE_FUNCTION(DELETE_FUNCTION_NAME, TABLE_NAME);
PERFORM ZAFIRA.CREATE_DELETE_TRIGGER(DELETE_FUNCTION_NAME, TABLE_NAME, DELETE_TRIGGER_NAME);
END
$$
LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION GENERATE_PARTITION(FIRST_PARTITION_ITEM_ID INTEGER, MAX_COUNT_IN_PARTITION INTEGER)
RETURNS VOID AS
$$
DECLARE TABLE_NAME TEXT;
DECLARE INSERT_FUNCTION_NAME TEXT;
DECLARE UPDATE_FUNCTION_NAME TEXT;
DECLARE DELETE_FUNCTION_NAME TEXT;
DECLARE INSERT_TRIGGER_NAME TEXT;
DECLARE UPDATE_TRIGGER_NAME TEXT;
DECLARE DELETE_TRIGGER_NAME TEXT;

BEGIN

TABLE_NAME := 'tests';
INSERT_FUNCTION_NAME := (TABLE_NAME || '_insert_row_in_partition()');
UPDATE_FUNCTION_NAME := (TABLE_NAME || '_add_partition()');
DELETE_FUNCTION_NAME := (TABLE_NAME || '_delete_row_from_master()');
INSERT_TRIGGER_NAME := (TABLE_NAME || '_insert_trigger');
UPDATE_TRIGGER_NAME := (TABLE_NAME || '_update_trigger');
DELETE_TRIGGER_NAME := (TABLE_NAME || '_delete_trigger');

ALTER TABLE zafira.tests DROP CONSTRAINT IF EXISTS fk_tests_test_runs1;
ALTER TABLE zafira.test_work_items DROP CONSTRAINT IF EXISTS fk_test_work_items_tests1;
ALTER TABLE zafira.test_artifacts DROP CONSTRAINT IF EXISTS fk_test_artifacts_tests1;
ALTER TABLE zafira.test_tags DROP CONSTRAINT IF EXISTS fk_tests_test_tags1;

EXECUTE 'DROP TRIGGER IF EXISTS '||INSERT_TRIGGER_NAME||' ON '||TABLE_NAME||';';
EXECUTE 'DROP TRIGGER IF EXISTS '||DELETE_TRIGGER_NAME||' ON '||TABLE_NAME||';';
EXECUTE 'DROP TRIGGER IF EXISTS '||UPDATE_TRIGGER_NAME||' ON '||TABLE_NAME||';';

PERFORM ZAFIRA.CREATE_INSERT_FUNCTION_AND_TRIGGER
(TABLE_NAME, INSERT_FUNCTION_NAME, INSERT_TRIGGER_NAME, MAX_COUNT_IN_PARTITION, FIRST_PARTITION_ITEM_ID);

PERFORM ZAFIRA.CREATE_UPDATE_FUNCTION_AND_TRIGGER
(TABLE_NAME, INSERT_FUNCTION_NAME, INSERT_TRIGGER_NAME,
 UPDATE_FUNCTION_NAME, UPDATE_TRIGGER_NAME, MAX_COUNT_IN_PARTITION, FIRST_PARTITION_ITEM_ID);

PERFORM ZAFIRA.CREATE_DELETE_FUNCTION_AND_TRIGGER
(TABLE_NAME, DELETE_FUNCTION_NAME, DELETE_TRIGGER_NAME);

END $$
LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION START_PARTITIONING(FIRST_PARTITION_ITEM_ID INTEGER, MAX_COUNT_IN_PARTITION INTEGER)
RETURNS VOID AS
$$
BEGIN
EXECUTE 'ALTER SEQUENCE zafira.tests_id_seq RESTART WITH '||FIRST_PARTITION_ITEM_ID||'';
PERFORM GENERATE_PARTITION(FIRST_PARTITION_ITEM_ID, MAX_COUNT_IN_PARTITION);
END $$
LANGUAGE plpgsql;

SELECT START_PARTITIONING(REPLACE_ME, 100);


