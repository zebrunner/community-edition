set schema 'management';

-- insert new 'MILESTONE DETAILS' widget_template
INSERT INTO WIDGET_TEMPLATES ( ID, NAME, DESCRIPTION, TYPE, SQL, CHART_CONFIG, PARAMS_CONFIG, PARAMS_CONFIG_SAMPLE, HIDDEN) VALUES (17,'MILESTONE DETAILS', 'Consolidated test status trend with the ability to specify 10+ extra filters and grouping by hours, days, month, etc.', 'OTHER','<#global IGNORE_TOTAL_PARAMS = ["DEVICE", "APP_VERSION", "LOCALE", "LANGUAGE", "JOB_NAME", "PARENT_JOB"] >

<#global IGNORE_PERSONAL_PARAMS = ["OWNER_USERNAME"] >
<#global MULTIPLE_VALUES = {
    "PROJECT": multiJoin(PROJECT, projects),
    "OWNER_USERNAME": join(USER),
    "ENV": join(ENV),
    "PRIORITY": join(PRIORITY),
    "FEATURE": join(FEATURE),
    "TASK": join(TASK),
    "LOWER(PLATFORM)": join(PLATFORM),
    "DEVICE": join(DEVICE),
    "APP_VERSION": join(APP_VERSION),
    "LOCALE": join(LOCALE),
    "LANGUAGE": join(LANGUAGE)
}>
<#global WHERE_MULTIPLE_CLAUSE = generateMultipleWhereClause(MULTIPLE_VALUES) />
<#global VIEW = getView(PERIOD) />
<#global GROUP_AND_ORDER_BY = getGroupBy(PERIOD, PARENT_JOB) />

SELECT
      ${GROUP_AND_ORDER_BY} AS "CREATED_AT",
      sum( PASSED ) AS "PASSED",
      sum( FAILED ) AS "FAILED",
      sum( SKIPPED ) AS "SKIPPED",
      sum( KNOWN_ISSUE ) AS "KNOWN ISSUE",
      sum( ABORTED ) AS "ABORTED",
      sum( QUEUED ) AS "QUEUED"
  FROM ${VIEW}
  ${WHERE_MULTIPLE_CLAUSE}
  GROUP BY ${GROUP_AND_ORDER_BY}
  ORDER BY ${GROUP_AND_ORDER_BY};

  <#--
    Generates WHERE clause for multiple choosen parameters
    @map - collected data to generate ''where'' clause (key - DB column name : value - expected DB value)
    @return - generated WHERE clause
  -->

<#function generateMultipleWhereClause map>
<#local result = "" />
<#list map?keys as key>
    <#if map[key] != "" >
      <#if PERIOD == "Total" && IGNORE_TOTAL_PARAMS?seq_contains(key)>
        <#-- Ignore non supported filters for Total View: PLATFORM, DEVICE, APP_VERSION, LOCALE, LANGUAGE, JOB_NAME-->
        <#continue>
      </#if>
      <#if PERSONAL == "true" && IGNORE_PERSONAL_PARAMS?seq_contains(key)>
        <#-- Ignore non supported filters for Personal chart: USER -->
        <#continue>
      </#if>
      <#if result?length != 0>
      <#local result = result + " AND "/>
      </#if>
      <#local result = result + key + " LIKE ANY (''{" + map[key] + "}'')"/>
    </#if>
</#list>

<#if result?length != 0 && PERSONAL == "true">
  <!-- add personal filter by currentUserId with AND -->
  <#local result = result + " AND OWNER_ID=${currentUserId} "/>
<#elseif result?length == 0 && PERSONAL == "true">
  <!-- add personal filter by currentUserId without AND -->
  <#local result = " OWNER_ID=${currentUserId} "/>
</#if>

<#if PERIOD != "Total">
  <#if PARENT_JOB != "">
      <#if result?length != 0>
      <#local result = result + " AND "/>
      </#if>
      <#local result = result + "UPSTREAM_JOB_NAME = ''" + PARENT_JOB + "''"/>
  </#if>
 </#if>

 <#if result?length != 0>
  <#local result = " WHERE " + result/>
 </#if>

 <#return result>
</#function>

<#--
    Retrieves actual view name by abstract view description
    @value - abstract view description
    @return - actual view name
  -->

<#function getGroupBy Period, parentJob>
  <#local result = "" />
  <#if parentJob != "">
    <#local result = "UPSTREAM_JOB_BUILD_NUMBER" />
  <#else>
    <#local result = getCreatedAt(PERIOD) />
  </#if>
 <#return result>
</#function>

<#--
    Retrieves actual CREATED_BY grouping  by abstract view description
    @value - abstract view description
    @return - actual view name
  -->

<#function getCreatedAt value>
  <#local result = "to_char(date_trunc(''day'', CREATED_AT), ''YYYY-MM-DD'')" />
  <#switch value>
    <#case "Last 24 Hours">
      <#local result = "to_char(date_trunc(''hour'', CREATED_AT), ''MM-DD HH24:MI'')" />
      <#break>
    <#case "Nightly">
      <#local result = "to_char(date_trunc(''hour'', CREATED_AT), ''HH24:MI'')" />
      <#break>
    <#case "Last 7 Days">
    <#case "Last 14 Days">
    <#case "Last 30 Days">
    <#case "Weekly">
    <#case "Monthly">
      <#local result = "to_char(date_trunc(''day'', CREATED_AT), ''YYYY-MM-DD'')" />
      <#break>
    <#case "Total">
      <#local result = "to_char(date_trunc(''month'', CREATED_AT), ''YYYY-MM'')" />
      <#break>
  </#switch>
  <#return result>
</#function>

<#--
    Retrieves actual view name by abstract view description
    @value - abstract view description
    @return - actual view name
  -->

<#function getView value>
 <#local result = "LAST24HOURS_VIEW" />
 <#switch value>
  <#case "Last 24 Hours">
    <#local result = "LAST24HOURS_VIEW" />
    <#break>
  <#case "Last 7 Days">
    <#local result = "LAST7DAYS_VIEW" />
    <#break>
  <#case "Last 14 Days">
    <#local result = "LAST14DAYS_VIEW" />
    <#break>
  <#case "Last 30 Days">
    <#local result = "LAST30DAYS_VIEW" />
    <#break>
  <#case "Nightly">
    <#local result = "NIGHTLY_VIEW" />
    <#break>
  <#case "Weekly">
    <#local result = "WEEKLY_VIEW" />
    <#break>
  <#case "Monthly">
    <#local result = "MONTHLY_VIEW" />
    <#break>
  <#case "Total">
    <#local result = "TOTAL_VIEW" />
    <#break>
 </#switch>
 <#return result>
</#function>

<#--
    Joins array values using '', '' separator
    @array - to join
    @return - joined array as string
  -->

<#function join array=[]>
  <#return array?join('', '') />
</#function>

<#--
    Joins array values using '', '' separator
    @array1 - to join, has higher priority that array2
    @array2 - alternative to join if array1 does not exist or is empty
    @return - joined array as string
  -->

<#function multiJoin array1=[] array2=[]>
  <#return ((array1?? && array1?size != 0) || ! array2??)?then(join(array1), join(array2)) />
</#function>' , '
setTimeout( function() { 
  const created = dataset[0].CREATED_AT.toString();
  const lastCount = dataset.length - 1;
  const lastValue = dataset[lastCount].CREATED_AT.toString();

  let dataSource = [
      ["CREATED_AT"], ["PASSED"], ["FAILED"], ["SKIPPED"], ["QUEUED"], ["ABORTED"], ["KNOWN ISSUE"]
    ];

  const createDatasetSource = () => {
    let amount = dataset.length;
    for (let i = 0; i < amount; i++) {
      dataSource.forEach((value, index) => {
        let valueName = value[0];
        let pushValue = dataset[i][valueName];
        if (valueName === "CREATED_AT") {
          value.push(pushValue.toString());
        } else {
          value.push(pushValue);
        }
      })
    }

    return dataSource;
  };



  let newLine = "";
  let grid, legend, pieStyle, title;

  customStyle = () => {
    const screenWidth = window.innerWidth;
    const rich = (fontSize) => {
      return {
        PASSED:{ color: "#61c8b3", fontSize: fontSize},
        FAILED:{ color: "#e76a77", fontSize: fontSize },
        SKIPPED:{ color: "#fddb7a", fontSize: fontSize },
        QUEUED:{ color: "#6dbbe7", fontSize: fontSize },
        ABORTED:{ color: "#b5b5b5", fontSize: fontSize },
        KNOWN_ISSUE:{ color: "#9f5487", fontSize: fontSize }
      }
    };

    if (chart._dom.clientWidth === 280) {
      grid = {
        top: "50%",
        left:"30px",
        right:"15px",
        bottom:"15%",
      };
      legend = {
        orient: "vertical",
        x: "left",
        y: "top",
        left: "1%",
        top: "10px",
        icon:"roundRect",
        itemGap: 2,
        itemWidth:10,
        itemHeight:7,
        textStyle: {
          fontSize: 7
        }
      };
      title = {
        show:true,
        right:"2.5%",
        top:"41%",
        textStyle:{
         rich: rich(8)
        }
      };
      pieStyle = {
        radius: "40%",
        center: ["60%", "23%"]
      };
    } else if (screenWidth < 481) {
        grid = {
          top: "50%",
          left:"30px",
          right:"15px",
          bottom:"15%",
        }
        legend = {
          orient: "vertical",
          x: "left",
          y: "top",
          left: "1%",
          top: "10px",
          icon:"roundRect",
          itemGap: 5,
          textStyle: {
            fontSize: 10
          }
        }
        pieStyle = {
          radius: "40%",
          center: ["65%", "23%"]
        }
        title = {
        show: true,
        right: "2.5%",
        top: "44%",
        textStyle: {
          rich: rich(10)
        }
      }
    } else {
      grid = {
        top: "7%",
        left: "27%",
        right:"3%",
        bottom:"17%"
      };
      if (screenWidth > 1250) grid.left = "30%";
      else grid.left = "35%";
      legend = {
        orient: "vertical",
        x: "left",
        y: "center",
        left: "1%",
        icon:"roundRect"
      };
      title = {
        show:true,
        right: "3%",
        top:"0",
        textStyle: {
          fontWeight:"bolder",
          rich: rich(13)
        }
      };
      pieStyle = {
        radius: "70%",
        center: ["15%", "47%"]
      };
    }
  }
  customStyle();


  let lineRow = {
    type: "line",
    smooth: false,
    seriesLayoutBy: "row",
    stack: "Status",
    itemStyle: {
      normal: {
        areaStyle: {
          opacity: 0.8,
          type: "default"
        }
      }
    }
  };

  let pie = {
    type: "pie",
    id: "pie",
    radius: pieStyle.radius,
    center:  pieStyle.center,
    label: { show: false },
    encode: {
        itemName: "CREATED_AT",
        value: lastValue,
        tooltip: lastValue
    },
    selectedMode : true,
    emphasis: {
      label: {
        show: true,
        formatter: "{b}: {d}%"
      }
    }
  }

  let series = [];
  for (var i = 0; i < dataSource.length - 1 ; i++) {
    series.push(lineRow);
  }
  series.push(pie);


  const changeTitle = (value = lastCount) => {
    let titleValue="";
    let total = 0;
    let newDataObj = {};


    for (const testName in dataset[value]){
      if (testName === "CREATED_AT") continue;
      total +=  dataset[value][testName];
    }

    for (let i = 0; i < dataSource.length; i++){
      newDataObj[dataSource[i][0]] = dataset[value][dataSource[i][0]]
    }

    Object.entries(newDataObj).forEach(([key, value]) => {
      if (value === 0 || key === "CREATED_AT")  return
        let parameter = key === "KNOWN ISSUE" ? "KNOWN_ISSUE" : key;
        persentValue = (value * 100 / total).toFixed(2);
        titleValue += `{${parameter}|${key}: ${persentValue}%; }`;
      });
      chart.setOption({
        title:{
          text: titleValue
        }
      })
    }

  changeTitle();


let colors = ["#61c8b3", "#e76a77", "#fddb7a", "#6dbbe7", "#b5b5b5", "#9f5487"];
let option = {
        title:title,
        grid: grid,
        color: colors,
        legend: legend,
        tooltip: {
            trigger: "axis",
            showDelay: 1
        },
        dataZoom: [
          {
            startValue: created,
            bottom: "0",
            height : "25px"
          },
          {type: "inside"}
        ],
        dataset: {
          source: createDatasetSource()
        },
        xAxis: {
          type: "category",
          boundaryGap: false
        },
        yAxis: {
          gridIndex: 0
        },
        series: series
    };

    chart.on("updateAxisPointer", function (event) {
        var xAxisInfo = event.axesInfo[0];
        if (xAxisInfo) {
            var dimension = xAxisInfo.value + 1;
            chart.setOption({
                series: {
                  id: "pie",
                  label: {
                      formatter: "{b}: ({d}%)"
                  },
                  encode: {
                    value: dimension,
                    tooltip: dimension
                  }
                }
            });
            changeTitle(dimension - 1);
        }
    });
    chart.setOption(option);
}, 1000)' , '{
  "PERIOD": {
    "values": [
      "Last 24 Hours",
      "Last 7 Days",
      "Last 14 Days",
      "Last 30 Days",
      "Nightly",
      "Weekly",
      "Monthly",
      "Total"
      ]
  },
  "PERSONAL": {
    "values": [
      "false",
      "true"
      ],
    "type": "radio",
    "required": true
  },
  "PROJECT": {
    "valuesQuery": "SELECT NAME FROM PROJECTS WHERE NAME <> '''' ORDER BY 1;",
    "multiple": true
  },
  "PLATFORM": {
    "valuesQuery": "SELECT DISTINCT LOWER(PLATFORM) FROM TEST_CONFIGS WHERE PLATFORM <> '''' ORDER BY 1;",
    "multiple": true
  },
  "USER": {
    "valuesQuery": "SELECT USERNAME FROM USERS ORDER BY 1;",
    "multiple": true
  },
  "ENV": {
    "valuesQuery": "SELECT DISTINCT ENV FROM TEST_CONFIGS WHERE ENV IS NOT NULL AND ENV <> '''' ORDER BY 1;",
    "multiple": true
  },
  "PRIORITY": {
    "valuesQuery": "SELECT VALUE FROM TAGS WHERE NAME=''priority'' ORDER BY 1;",
    "multiple": true
  },
  "FEATURE": {
    "valuesQuery": "SELECT VALUE FROM TAGS WHERE NAME=''feature'' ORDER BY 1;",
    "multiple": true
  },
  "TASK": {
    "valuesQuery": "SELECT DISTINCT JIRA_ID FROM WORK_ITEMS WHERE TYPE=''TASK'' ORDER BY 1;",
    "multiple": true
  },
  "Separator": {
    "value": "Below params are not applicable for Total period!",
    "type": "title",
    "required": false
  },
  "DEVICE": {
    "valuesQuery": "SELECT DISTINCT DEVICE FROM TEST_CONFIGS WHERE DEVICE IS NOT NULL AND DEVICE <> '''' ORDER BY 1;",
    "multiple": true
  },
  "APP_VERSION": {
    "valuesQuery": "SELECT DISTINCT APP_VERSION FROM TEST_CONFIGS WHERE APP_VERSION IS NOT NULL AND APP_VERSION <> '''';",
    "multiple": true
  },
  "LOCALE": {
    "valuesQuery": "SELECT DISTINCT LOCALE FROM TEST_CONFIGS WHERE LOCALE IS NOT NULL AND LOCALE <> '''';",
    "multiple": true
  },
  "LANGUAGE": {
    "valuesQuery": "SELECT DISTINCT LANGUAGE FROM TEST_CONFIGS WHERE LANGUAGE IS NOT NULL AND LANGUAGE <> '''';",
    "multiple": true
  },
  "JOB_NAME": {
    "value": "",
    "required": false
  },
  "PARENT_JOB": {
    "value": "",
    "required": false
  },
  "PARENT_BUILD": {
    "value": "",
    "required": false
  }
}', '{
  "PERIOD": "Last 30 Days",
  "PERSONAL": "false",
  "currentUserId": 1,
  "PROJECT": [],
  "USER": ["anonymous"],
  "ENV": [],
  "PRIORITY": [],
  "FEATURE": [],
  "TASK": [],
  "PLATFORM": [],
  "DEVICE": [],
  "APP_VERSION": [],
  "LOCALE": [],
  "LANGUAGE": [],
  "JOB_NAME": "",
  "PARENT_JOB": "Carina-Demo-Regression-Pipeline",
  "PARENT_BUILD": ""
}', false);