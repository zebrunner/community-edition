set schema 'zafira';
 
select check_version(102);

DROP VIEW IF EXISTS NIGHTLY_VIEW;
CREATE VIEW NIGHTLY_VIEW AS (
  SELECT  row_number() OVER () AS ID,
          PROJECTS.NAME AS PROJECT,
          USERS.ID AS OWNER_ID,
          USERS.USERNAME AS OWNER,
          USERS.EMAIL AS EMAIL,
          TEST_RUNS.ENV as ENV,
          TEST_CONFIGS.PLATFORM as PLATFORM,
          TEST_CONFIGS.PLATFORM_VERSION as PLATFORM_VERSION,
          TEST_CONFIGS.BROWSER as BROWSER,
          TEST_CONFIGS.BROWSER_VERSION as BROWSER_VERSION,
          TEST_CONFIGS.APP_VERSION as BUILD,
          TEST_CONFIGS.DEVICE as DEVICE,
          TEST_CONFIGS.URL as URL,
          TEST_CONFIGS.LOCALE as LOCALE,
          TEST_CONFIGS.LANGUAGE as LANGUAGE,
          JOBS.JOB_URL AS JOB_URL,
          JOBS.NAME AS JOB_NAME,
          TEST_SUITES.USER_ID AS JOB_OWNER_ID,
          TEST_SUITES.NAME AS TEST_SUITE_NAME,
          TEST_RUNS.ID AS TEST_RUN_ID,
          TEST_RUNS.STATUS AS TEST_RUN_STATUS,
          TEST_RUNS.BUILD_NUMBER As JobBuild,
          '<a href="' || JOBS.JOB_URL  || '/' || CAST(TEST_RUNS.BUILD_NUMBER AS text) || '/eTAF_Report' || '" target="_blank">' || JOBS.NAME || '</a>' as eTAF_Report,
          '<a href="' || JOBS.JOB_URL  || '/' || CAST(TEST_RUNS.BUILD_NUMBER AS text) || '/rebuild/parameterized' || '" target="_blank">Rebuild</a>' as Rebuild,
          TEST_RUNS.ELAPSED AS Elapsed,
          TEST_RUNS.STARTED_AT AS Started,
          TEST_RUNS.CREATED_AT::date AS Updated,
          TEST_RUNS.UPSTREAM_JOB_ID AS UPSTREAM_JOB_ID,
          TEST_RUNS.UPSTREAM_JOB_BUILD_NUMBER AS UPSTREAM_JOB_BUILD_NUMBER,
          UPSTREAM_JOBS.NAME AS UPSTREAM_JOB_NAME,
          UPSTREAM_JOBS.JOB_URL AS UPSTREAM_JOB_URL,
          TEST_RUNS.SCM_URL AS SCM_URL,
          sum( case when TESTS.STATUS = 'PASSED' then 1 else 0 end ) AS PASSED,
          sum( case when TESTS.STATUS = 'FAILED' AND TESTS.KNOWN_ISSUE=FALSE then 1 else 0 end ) AS FAILED,
          sum( case when TESTS.STATUS = 'FAILED' AND TESTS.KNOWN_ISSUE=TRUE then 1 else 0 end ) AS KNOWN_ISSUE,
          sum( case when TESTS.STATUS = 'SKIPPED' then 1 else 0 end ) AS SKIPPED,
          sum( case when TESTS.STATUS = 'ABORTED' then 1 else 0 end ) AS ABORTED,
          sum( case when TESTS.STATUS = 'IN_PROGRESS' then 1 else 0 end ) AS IN_PROGRESS,
          sum( case when TESTS.STATUS = 'QUEUED' then 1 else 0 end ) AS QUEUED,
          count( TESTS.STATUS ) AS TOTAL
  FROM TESTS INNER JOIN
    TEST_RUNS ON TEST_RUNS.ID=TESTS.TEST_RUN_ID INNER JOIN
    TEST_CASES ON TESTS.TEST_CASE_ID=TEST_CASES.ID LEFT JOIN
    TEST_CONFIGS ON TESTS.TEST_CONFIG_ID = TEST_CONFIGS.ID LEFT JOIN
    PROJECTS ON TEST_CASES.PROJECT_ID = PROJECTS.ID INNER JOIN
    JOBS JOBS ON TEST_RUNS.JOB_ID = JOBS.ID LEFT JOIN
    JOBS UPSTREAM_JOBS ON TEST_RUNS.UPSTREAM_JOB_ID = UPSTREAM_JOBS.ID INNER JOIN
    USERS ON TEST_CASES.PRIMARY_OWNER_ID=USERS.ID INNER JOIN
    TEST_SUITES ON TEST_RUNS.TEST_SUITE_ID = TEST_SUITES.ID
  WHERE TESTS.CREATED_AT >= current_date
        AND TEST_RUNS.STARTED_AT >= current_date
  GROUP BY PROJECTS.NAME, TEST_RUNS.ID, USERS.ID, TEST_CONFIGS.PLATFORM, TEST_CONFIGS.PLATFORM_VERSION, TEST_CONFIGS.BROWSER, TEST_CONFIGS.BROWSER_VERSION,
    TEST_CONFIGS.DEVICE, TEST_CONFIGS.URL, TEST_CONFIGS.LOCALE, TEST_CONFIGS.LANGUAGE, TEST_CONFIGS.APP_VERSION, JOBS.ID, JOBS.JOB_URL, JOBS.NAME,
    UPSTREAM_JOBS.NAME, UPSTREAM_JOBS.JOB_URL, TEST_SUITES.NAME, TEST_SUITES.USER_ID
);


select add_version(102);
