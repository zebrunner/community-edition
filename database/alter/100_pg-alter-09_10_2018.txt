set schema 'zafira';
 
select check_version(100);

DROP TABLE IF EXISTS TAGS;
CREATE TABLE IF NOT EXISTS TAGS (
  ID SERIAL,
  NAME VARCHAR(50) NOT NULL,
  VALUE VARCHAR(255) NOT NULL,
  MODIFIED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CREATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (ID));
  CREATE UNIQUE INDEX TAGS_UNIQUE ON TAGS (NAME, VALUE);
CREATE INDEX TAGS_NAME ON TAGS (NAME);
CREATE INDEX TAGS_VALUE ON TAGS (VALUE);
CREATE TRIGGER update_timestamp_tags BEFORE INSERT OR UPDATE ON TAGS FOR EACH ROW EXECUTE PROCEDURE update_timestamp();

DROP TABLE IF EXISTS TEST_TAGS;
CREATE TABLE IF NOT EXISTS TEST_TAGS (
  ID SERIAL,
  TEST_ID INT NOT NULL,
  TAG_ID INT NOT NULL,
  MODIFIED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CREATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (ID),
  CONSTRAINT fk_TESTS_TEST_TAGS1
    FOREIGN KEY (TEST_ID)
    REFERENCES TESTS (ID)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT fk_TAGS_TEST_TAGS1
    FOREIGN KEY (TAG_ID)
    REFERENCES TAGS (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);
CREATE INDEX fk_TESTS_TEST_TAGS1_idx ON  TEST_TAGS (TEST_ID);
CREATE INDEX fk_TAGS_TEST_TAGS1_idx ON  TEST_TAGS (TAG_ID);
CREATE UNIQUE INDEX TEST_TAGS_UNIQUE ON TEST_TAGS (TAG_ID, TEST_ID);
CREATE TRIGGER update_timestamp_test_tags BEFORE INSERT OR UPDATE ON TEST_TAGS FOR EACH ROW EXECUTE PROCEDURE update_timestamp();

select add_version(100);
